# show all database
show dbs

# create a new database
> use shop
switched to db shop

> show collections

> db.products.insertOne({name: "A Book", price: 12.99})

> db.products.find()
{ "_id" : ObjectId("5f12a043feace8e519f293ed"), "name" : "A Book", "price" : 12.99 }

> db.products.find().pretty()
{
	"_id" : ObjectId("5f12a043feace8e519f293ed"),
	"name" : "A Book",
	"price" : 12.99
}


> db.products.insertOne({name: "A T-shirt", price: 29.99, description: "This is high quality T-shirt"})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f12e3b1fa9f127dd8b9c7b4")
}
> db.products.find().pretty()
{
	"_id" : ObjectId("5f12a043feace8e519f293ed"),
	"name" : "A Book",
	"price" : 12.99
}
{
	"_id" : ObjectId("5f12e3b1fa9f127dd8b9c7b4"),
	"name" : "A T-shirt",
	"price" : 29.99,
	"description" : "This is high quality T-shirt"
}

> db.products.insertOne({name: "A Computer", price:34829.99, description: "This is high quality computer", details:{cpu: "Intel i7 8770",memory: 32}})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f12e5edfa9f127dd8b9c7b5")
}
> db.products.find().pretty()
{
	"_id" : ObjectId("5f12a043feace8e519f293ed"),
	"name" : "A Book",
	"price" : 12.99
}
{
	"_id" : ObjectId("5f12e3b1fa9f127dd8b9c7b4"),
	"name" : "A T-shirt",
	"price" : 29.99,
	"description" : "This is high quality T-shirt"
}
{
	"_id" : ObjectId("5f12e5edfa9f127dd8b9c7b5"),
	"name" : "A Computer",
	"price" : 34829.99,
	"description" : "This is high quality computer",
	"details" : {
		"cpu" : "Intel i7 8770",
		"memory" : 32
	}
}

// to create a different port
sudo mongod --port 27018
// to start port
mongo --port 27018


> db.flightData.insertOne( {     "departureAirport": "MUC",     "arrivalAirport": "SFO",     "aircraft": "Airbus A380",     "distance": 12000,     "intercontinental": true   })
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f130951d022deabe244f26c")
}
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f130951d022deabe244f26c"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true
}


-----------------CRUD Operations------------------------

// Create
insertOne(data, options)
insertMany(data, options)

> db.flightData.insertMany([
...   {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   },
...   {
...     "departureAirport": "LHR",
...     "arrivalAirport": "TXL",
...     "aircraft": "Airbus A320",
...     "distance": 950,
...     "intercontinental": false
...   }
... ])
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("5f132aebd022deabe244f26d"),
		ObjectId("5f132aebd022deabe244f26e")
	]
}
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false
}
> 


// Read
find(filter, options)
findOne(filter, options)

find gives us a cursor object not an array

> db.flightData.find({intercontinental: true}).pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true
}

> db.flightData.find({distance: {$gt: 10000}}).pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true
}

> db.flightData.findOne({distance: {$gt: 900}})
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true
}

> db.passengers.find().toArray()
[
	{
		"_id" : ObjectId("5f1339f7d022deabe244f26f"),
		"name" : "Max Schwarzmueller",
		"age" : 29
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f270"),
		"name" : "Manu Lorenz",
		"age" : 30
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f271"),
		"name" : "Chris Hayton",
		"age" : 35
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f272"),
		"name" : "Sandeep Kumar",
		"age" : 28
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f273"),
		"name" : "Maria Jones",
		"age" : 30
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f274"),
		"name" : "Alexandra Maier",
		"age" : 27
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f275"),
		"name" : "Dr. Phil Evans",
		"age" : 47
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f276"),
		"name" : "Sandra Brugge",
		"age" : 33
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f277"),
		"name" : "Elisabeth Mayr",
		"age" : 29
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f278"),
		"name" : "Frank Cube",
		"age" : 41
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f279"),
		"name" : "Karandeep Alun",
		"age" : 48
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f27a"),
		"name" : "Michaela Drayer",
		"age" : 39
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f27b"),
		"name" : "Bernd Hoftstadt",
		"age" : 22
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f27c"),
		"name" : "Scott Tolib",
		"age" : 44
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f27d"),
		"name" : "Freddy Melver",
		"age" : 41
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f27e"),
		"name" : "Alexis Bohed",
		"age" : 35
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f27f"),
		"name" : "Melanie Palace",
		"age" : 27
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f280"),
		"name" : "Armin Glutch",
		"age" : 35
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f281"),
		"name" : "Klaus Arber",
		"age" : 53
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f282"),
		"name" : "Albert Twostone",
		"age" : 68
	},
	{
		"_id" : ObjectId("5f1339f7d022deabe244f283"),
		"name" : "Gordon Black",
		"age" : 38
	}
]


> db.passengers.find().forEach((passengerData) => {printjson(passengerData)})
{
	"_id" : ObjectId("5f1339f7d022deabe244f26f"),
	"name" : "Max Schwarzmueller",
	"age" : 29
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f270"),
	"name" : "Manu Lorenz",
	"age" : 30
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f271"),
	"name" : "Chris Hayton",
	"age" : 35
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f272"),
	"name" : "Sandeep Kumar",
	"age" : 28
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f273"),
	"name" : "Maria Jones",
	"age" : 30
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f274"),
	"name" : "Alexandra Maier",
	"age" : 27
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f275"),
	"name" : "Dr. Phil Evans",
	"age" : 47
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f276"),
	"name" : "Sandra Brugge",
	"age" : 33
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f277"),
	"name" : "Elisabeth Mayr",
	"age" : 29
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f278"),
	"name" : "Frank Cube",
	"age" : 41
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f279"),
	"name" : "Karandeep Alun",
	"age" : 48
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27a"),
	"name" : "Michaela Drayer",
	"age" : 39
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27b"),
	"name" : "Bernd Hoftstadt",
	"age" : 22
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27c"),
	"name" : "Scott Tolib",
	"age" : 44
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27d"),
	"name" : "Freddy Melver",
	"age" : 41
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27e"),
	"name" : "Alexis Bohed",
	"age" : 35
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27f"),
	"name" : "Melanie Palace",
	"age" : 27
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f280"),
	"name" : "Armin Glutch",
	"age" : 35
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f281"),
	"name" : "Klaus Arber",
	"age" : 53
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f282"),
	"name" : "Albert Twostone",
	"age" : 68
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f283"),
	"name" : "Gordon Black",
	"age" : 38
}


// Update
updateOne(filter, data, options)
updateMany(filter, data, options)
replaceOne(filter, data, options)

> db.flightData.updateOne({distance: 1200},{$set:{marker: "delete"}})
> db.flightData.updateMany({},{$set:{marker: "toDelete"}})

> db.flightData.updateOne({_id : ObjectId("5f132aebd022deabe244f26d")},{$set:{delayed: true}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 0 }
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true,
	"delayed" : true
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false
}

> db.flightData.update({_id : ObjectId("5f132aebd022deabe244f26d")},{$set:{delayed: false}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true,
	"delayed" : false
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false
}

> db.flightData.update({_id : ObjectId("5f132aebd022deabe244f26d")},{delayed: false})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.flightData.find().pretty()
{ "_id" : ObjectId("5f132aebd022deabe244f26d"), "delayed" : false }
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false
}
// same can be done by replaceOne
> db.flightData.replaceOne({_id : ObjectId("5f132aebd022deabe244f26d")},{
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false
}


Delete
deleteOne(filter, options)
deleteMany(filter, options)

db.flightData.deleteOne({departureAirport :"MUC"})
> db.flightData.deleteMany({marker: "toDelete"})


------------------- Projection-------------------

> db.passengers.find({},{name: 1}).pretty()
{
	"_id" : ObjectId("5f1339f7d022deabe244f26f"),
	"name" : "Max Schwarzmueller"
}
{ "_id" : ObjectId("5f1339f7d022deabe244f270"), "name" : "Manu Lorenz" }
{ "_id" : ObjectId("5f1339f7d022deabe244f271"), "name" : "Chris Hayton" }
{ "_id" : ObjectId("5f1339f7d022deabe244f272"), "name" : "Sandeep Kumar" }
{ "_id" : ObjectId("5f1339f7d022deabe244f273"), "name" : "Maria Jones" }
{ "_id" : ObjectId("5f1339f7d022deabe244f274"), "name" : "Alexandra Maier" }
{ "_id" : ObjectId("5f1339f7d022deabe244f275"), "name" : "Dr. Phil Evans" }
{ "_id" : ObjectId("5f1339f7d022deabe244f276"), "name" : "Sandra Brugge" }
{ "_id" : ObjectId("5f1339f7d022deabe244f277"), "name" : "Elisabeth Mayr" }
{ "_id" : ObjectId("5f1339f7d022deabe244f278"), "name" : "Frank Cube" }
{ "_id" : ObjectId("5f1339f7d022deabe244f279"), "name" : "Karandeep Alun" }
{ "_id" : ObjectId("5f1339f7d022deabe244f27a"), "name" : "Michaela Drayer" }
{ "_id" : ObjectId("5f1339f7d022deabe244f27b"), "name" : "Bernd Hoftstadt" }
{ "_id" : ObjectId("5f1339f7d022deabe244f27c"), "name" : "Scott Tolib" }
{ "_id" : ObjectId("5f1339f7d022deabe244f27d"), "name" : "Freddy Melver" }
{ "_id" : ObjectId("5f1339f7d022deabe244f27e"), "name" : "Alexis Bohed" }
{ "_id" : ObjectId("5f1339f7d022deabe244f27f"), "name" : "Melanie Palace" }
{ "_id" : ObjectId("5f1339f7d022deabe244f280"), "name" : "Armin Glutch" }
{ "_id" : ObjectId("5f1339f7d022deabe244f281"), "name" : "Klaus Arber" }
{ "_id" : ObjectId("5f1339f7d022deabe244f282"), "name" : "Albert Twostone" }


> db.passengers.find({},{name: 1,_id: 0}).pretty()
{ "name" : "Max Schwarzmueller" }
{ "name" : "Manu Lorenz" }
{ "name" : "Chris Hayton" }
{ "name" : "Sandeep Kumar" }
{ "name" : "Maria Jones" }
{ "name" : "Alexandra Maier" }
{ "name" : "Dr. Phil Evans" }
{ "name" : "Sandra Brugge" }
{ "name" : "Elisabeth Mayr" }
{ "name" : "Frank Cube" }
{ "name" : "Karandeep Alun" }
{ "name" : "Michaela Drayer" }
{ "name" : "Bernd Hoftstadt" }
{ "name" : "Scott Tolib" }
{ "name" : "Freddy Melver" }
{ "name" : "Alexis Bohed" }
{ "name" : "Melanie Palace" }
{ "name" : "Armin Glutch" }
{ "name" : "Klaus Arber" }
{ "name" : "Albert Twostone" }

-------------------------Embedded Documents---------------------

nested documents
have size limit limitations (50mb) up to 100 times

> db.flightData.updateMany({},{$set:{status:{description: "on-time", lastupdated: "i Hour ago"}}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 0 }
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true,
	"status" : {
		"description" : "on-time",
		"lastupdated" : "i Hour ago"
	}
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false,
	"status" : {
		"description" : "on-time",
		"lastupdated" : "i Hour ago"
	}
}

> db.flightData.updateMany({},{$set:{status:{description: "on-time", lastupdated: "i Hour ago",details:{responsible: "RAJU"}}}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }
> db.flightData.find().pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true,
	"status" : {
		"description" : "on-time",
		"lastupdated" : "i Hour ago",
		"details" : {
			"responsible" : "RAJU"
		}
	}
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false,
	"status" : {
		"description" : "on-time",
		"lastupdated" : "i Hour ago",
		"details" : {
			"responsible" : "RAJU"
		}
	}
}

// query an documents
> db.flightData.find({"status.description": "on-time"}).pretty()
{
	"_id" : ObjectId("5f132aebd022deabe244f26d"),
	"departureAirport" : "MUC",
	"arrivalAirport" : "SFO",
	"aircraft" : "Airbus A380",
	"distance" : 12000,
	"intercontinental" : true,
	"status" : {
		"description" : "on-time",
		"lastupdated" : "i Hour ago",
		"details" : {
			"responsible" : "RAJU"
		}
	}
}
{
	"_id" : ObjectId("5f132aebd022deabe244f26e"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false,
	"status" : {
		"description" : "on-time",
		"lastupdated" : "i Hour ago",
		"details" : {
			"responsible" : "RAJU"
		}
	}
}


------------------------Arrays-----------------------

Array of imbedded documents
Array can hold any data

> db.passengers.updateOne({name: "Albert Twostone"}, {$set:{hobbies:["sports", "cooking"]}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 0 }
> db.passengers.find().pretty()
{
	"_id" : ObjectId("5f1339f7d022deabe244f26f"),
	"name" : "Max Schwarzmueller",
	"age" : 29
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f270"),
	"name" : "Manu Lorenz",
	"age" : 30
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f271"),
	"name" : "Chris Hayton",
	"age" : 35
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f272"),
	"name" : "Sandeep Kumar",
	"age" : 28
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f273"),
	"name" : "Maria Jones",
	"age" : 30
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f274"),
	"name" : "Alexandra Maier",
	"age" : 27
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f275"),
	"name" : "Dr. Phil Evans",
	"age" : 47
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f276"),
	"name" : "Sandra Brugge",
	"age" : 33
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f277"),
	"name" : "Elisabeth Mayr",
	"age" : 29
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f278"),
	"name" : "Frank Cube",
	"age" : 41
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f279"),
	"name" : "Karandeep Alun",
	"age" : 48
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27a"),
	"name" : "Michaela Drayer",
	"age" : 39
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27b"),
	"name" : "Bernd Hoftstadt",
	"age" : 22
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27c"),
	"name" : "Scott Tolib",
	"age" : 44
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27d"),
	"name" : "Freddy Melver",
	"age" : 41
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27e"),
	"name" : "Alexis Bohed",
	"age" : 35
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f27f"),
	"name" : "Melanie Palace",
	"age" : 27
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f280"),
	"name" : "Armin Glutch",
	"age" : 35
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f281"),
	"name" : "Klaus Arber",
	"age" : 53
}
{
	"_id" : ObjectId("5f1339f7d022deabe244f282"),
	"name" : "Albert Twostone",
	"age" : 68,
	"hobbies" : [
		"sports",
		"cooking"
	]
}

> db.passengers.find({name: "Albert Twostone"}).pretty()
{
	"_id" : ObjectId("5f1339f7d022deabe244f282"),
	"name" : "Albert Twostone",
	"age" : 68,
	"hobbies" : [
		"sports",
		"cooking"
	]
}
> db.passengers.find({name: "Albert Twostone"}).hobbies
> db.passengers.findOne({name: "Albert Twostone"}).hobbies
[ "sports", "cooking" ]

// query an array
> db.passengers.find({hobbies: "sports"}).pretty()
{
	"_id" : ObjectId("5f1339f7d022deabe244f282"),
	"name" : "Albert Twostone",
	"age" : 68,
	"hobbies" : [
		"sports",
		"cooking"
	]
}

